#!/usr/bin/env bash

## Copyright (C) 2020-2023 Aditya Shakya <adi1090x@gmail.com>
## Modified 2023 Iqbal Thaker
##
## Script To Manage Speaker Volume For Archcraft (in Wayland).

iDIR="$HOME/.config/hypr/mako/icons"
notify_cmd='notify-send -h string:x-canonical-private-synchronous:sys-notify-volume -u low'

# Get Volume
get_volume() {
	echo "$(pamixer --get-volume)"
}

# Get icons
get_icon() {
	current="$(get_volume)"
	if [[ "$current" -eq "0" ]]; then
		icon="$iDIR/volume-mute.png"
	elif [[ ("$current" -ge "0") && ("$current" -le "30") ]]; then
		icon="$iDIR/volume-low.png"
	elif [[ ("$current" -ge "30") && ("$current" -le "60") ]]; then
		icon="$iDIR/volume-mid.png"
	elif [[ ("$current" -ge "60") && ("$current" -le "100") ]]; then
		icon="$iDIR/volume-high.png"
	fi
}

# Notify
notify_user() {
	${notify_cmd} -i "$icon" "Volume : $(get_volume)%"
}

# Increase Volume
inc_volume() {
	[[ $(pulsemixer --get-mute) == 1 ]] && pulsemixer --unmute
	pulsemixer --max-volume 150 --change-volume +5 && get_icon && notify_user
}

# Decrease Volume
dec_volume() {
	[[ $(pulsemixer --get-mute) == 1 ]] && pulsemixer --unmute
	pulsemixer --max-volume 150 --change-volume -5 && get_icon && notify_user
}

# Output to Speaker
# speaker() {
# 	pactl set-default-sink alsa_output.pci-0000_00_1b.0.analog-stereo
# 	notify-cmd -i "$iDIR/volume-mid.png" "Speakers"
# }

# Output to Headset
# headset() {
#    # Hack below as the Usb headset changes its name dependent on what port its plugged into.
#    pactl list | grep "Monitor of Sink: alsa_output.usb-Plantronics" | sed 's/Monitor of Sink: \(.*\)/\1/' | xargs pactl set-default-sink
#    notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i "$iDIR/headset.png" "Headphones"
# }

# Output to Bluetooth
# bluetooth() {
# 	# Hack below as the bluetooth headset changes its name dependent on device.
# 	pactl list | grep "Monitor of Sink: bluez_output." | sed 's/Monitor of Sink: \(.*\)/\1/' | xargs pactl set-default-sink
# 	notify-cmd -i "$iDIR/headset.png" "Bluetooth"
# }

# Toggle Mute
toggle_mute() {
	if [[ $(pulsemixer --get-mute) == 1 ]]; then
		pulsemixer --toggle-mute && ${notify_cmd} -i "$iDIR/volume-mute.png" "Mute"
	else
		pulsemixer --toggle-mute && get_icon && ${notify_cmd} -i "$icon" "Unmute"
	fi
}

# Toggle Mic
toggle_mic() {
	ID="$(pulsemixer --list-sources | grep 'Default' | cut -d',' -f1 | cut -d' ' -f3)"
	if [[ $(pulsemixer --id $ID --get-mute) == 1 ]]; then
		pulsemixer --id ${ID} --toggle-mute && ${notify_cmd} -i "$iDIR/microphone-mute.png" "Microphone ON"
	else
		pulsemixer --id ${ID} --toggle-mute && ${notify_cmd} -i "$iDIR/microphone.png" "Microphone OFF"
	fi
}

# Execute accordingly
if [[ -x $(which pulsemixer) ]]; then
	if [[ "$1" == "--get" ]]; then
		get_volume
	elif [[ "$1" == "--inc" ]]; then
		inc_volume
	elif [[ "$1" == "--dec" ]]; then
		dec_volume
	# elif [[ "$1" == "--speaker" ]]; then
	# 	speaker
	# elif [[ "$1" == "--headset" ]]; then
	# 	headset
	# elif [[ "$1" == "--bluetooth" ]]; then
	# 	bluetooth
	elif [[ "$1" == "--toggle" ]]; then
		toggle_mute
	elif [[ "$1" == "--toggle-mic" ]]; then
		toggle_mic
	elif [[ "$1" == "--get-icon" ]]; then
		get_icon
	else
		# echo $(get_volume)%
		echo $(notify_user)%
	fi
else
	${notify_cmd} "'Pulsemixer' is not installed."
fi
